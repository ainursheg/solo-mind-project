// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === МОДЕЛЬ ПОЛЬЗОВАТЕЛЯ ===
// v7.0: Переносим сюда все "накопительные" метрики, от которых напрямую зависят статы.
// Это делает модель Profile чисто "отображающей", а User - "накопительной".
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?

  // v7.0: Поля для отслеживания "усилий", от которых растут характеристики.
  totalMindEffort     Float    @default(0) // Для роста INT. Будем считать как (кол-во символов / 10).
  totalBodyEffort     Float    @default(0) // Для роста STR. Рассчитывается от EV_Body.
  quizzesPassed       Int      @default(0) // Для роста WIS. +1 за каждый пройденный квиз.
  approachesCompleted Int      @default(0) // Для роста END. +1 за каждый выполненный подход.

  // v7.0: Система мышечного восстановления. Храним в JSON.
  // Пример: { "push": 100, "pull": 20, "legs": 0 }
  muscleTension       Json     @default("{}")

  // Связи
  profile             Profile?
  activities          ActivityLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// === МОДЕЛЬ ПРОФИЛЯ ГЕРОЯ ===
// v7.0: Теперь это "витрина" текущего состояния героя. Все расчеты вынесены.
model Profile {
  id        Int      @id @default(autoincrement())
  level     Int      @default(1)
  currentXp Int      @default(0) // v7.0: Опыт в рамках текущего уровня. Сбрасывается при левел-апе.

  // v7.0: Убираем лишние статы, оставляем только те, что в MASTER_PLAN.
  // Они больше не растут напрямую, а являются производными от "усилий" в User.
  statStr   Int      @default(1) // Сила
  statEnd   Int      @default(1) // Выносливость
  statInt   Int      @default(1) // Интеллект
  statWis   Int      @default(1) // Мудрость

  // v7.0: Убираем xpToNextLevel, т.к. он теперь вычисляется на лету.
  // v7.0: Убираем statAgi и statFoc.

  // v7.0: Этот флаг остается, он идеально подходит для нового игрового цикла.
  isReadingUnlocked Boolean @default(true)

  // Связь с пользователем (один-к-одному)
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
}

// === МОДЕЛЬ ЛОГА АКТИВНОСТИ ===
// v7.0: Оставляем без изменений. Полезна для отладки и будущих фич.
model ActivityLog {
  id           Int      @id @default(autoincrement())
  activityType String
  description  String
  xpGained     Int
  statAffected String?

  // Связь с пользователем (многие-к-одному)
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  createdAt DateTime @default(now())
}

// Новая модель для упражнений
model Exercise {
  id         Int     @id @default(autoincrement())
  name       String  @unique
  multiplier Float
  group      String
}